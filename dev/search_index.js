var documenterSearchIndex = {"docs":
[{"location":"methods/#Methods-1","page":"Methods","title":"Methods","text":"","category":"section"},{"location":"methods/#","page":"Methods","title":"Methods","text":"The EMD and EEMD methods implemented are Julia implementations of the methods used in","category":"page"},{"location":"methods/#","page":"Methods","title":"Methods","text":"Luukko, P. J. J., Jouni Helske, and Esa Räsänen. \"Introducing libeemd: A program package for performing the ensemble empirical mode decomposition.\" Computational Statistics 31.2 (2016): 545-557.","category":"page"},{"location":"methods/#","page":"Methods","title":"Methods","text":"The approximation of the Hilbert transform implemented is derived from the MATLAB implementation: https://www.mathworks.com/help/signal/ug/hilbert-transform.html.","category":"page"},{"location":"extras/#Extra-Functions-1","page":"Extras","title":"Extra Functions","text":"","category":"section"},{"location":"extras/#","page":"Extras","title":"Extras","text":"hilbert_transform(signal::Vector{Float64})","category":"page"},{"location":"extras/#EmpiricalModeDecomposition.hilbert_transform-Tuple{Array{Float64,1}}","page":"Extras","title":"EmpiricalModeDecomposition.hilbert_transform","text":"hilbert_transform(signal::Vector{Float64})\n\nCompute the Hilbert transform using the DFT approximation.\n\n\n\n\n\n","category":"method"},{"location":"extras/#","page":"Extras","title":"Extras","text":"hht(signal::Vector{Float64}, s::EMDSetting)\nhht(signal::Vector{Float64}, s::EEMDSetting)","category":"page"},{"location":"extras/#EmpiricalModeDecomposition.hht-Tuple{Array{Float64,1},EMDSetting}","page":"Extras","title":"EmpiricalModeDecomposition.hht","text":"hht(signal::Vector{Float64}, s::EMDSetting)\n\nReturn the instantaneous energies and frequencies of the IMFS computed via the Hilbert-Huang transform with EMD settings specified.\n\n\n\n\n\n","category":"method"},{"location":"extras/#EmpiricalModeDecomposition.hht-Tuple{Array{Float64,1},EEMDSetting}","page":"Extras","title":"EmpiricalModeDecomposition.hht","text":"hht(signal::Vector{Float64}, s::EEMDSetting)\n\nReturn the instantaneous energies and frequencies of the IMFS computed via the Hilbert-Huang transform with EEMD settings specified.\n\n\n\n\n\n","category":"method"},{"location":"reference/#Library-Reference-1","page":"Reference","title":"Library Reference","text":"","category":"section"},{"location":"reference/#","page":"Reference","title":"Reference","text":"emd(input::Vector{Float64}, s::EMDSetting)","category":"page"},{"location":"reference/#EmpiricalModeDecomposition.emd-Tuple{Array{Float64,1},EMDSetting}","page":"Reference","title":"EmpiricalModeDecomposition.emd","text":"emd(input::Vector{Float64}, s::EMDSetting)\n\nCompute EMD of the input signal with given settings.\n\n\n\n\n\n","category":"method"},{"location":"reference/#","page":"Reference","title":"Reference","text":"EMDSetting","category":"page"},{"location":"reference/#EmpiricalModeDecomposition.EMDSetting","page":"Reference","title":"EmpiricalModeDecomposition.EMDSetting","text":"Store the settings required for performing the EMD.\n\n\n\n\n\n","category":"type"},{"location":"reference/#","page":"Reference","title":"Reference","text":"eemd(input::Vector{Float64}, s::EEMDSetting)","category":"page"},{"location":"reference/#EmpiricalModeDecomposition.eemd-Tuple{Array{Float64,1},EEMDSetting}","page":"Reference","title":"EmpiricalModeDecomposition.eemd","text":"eemd(input::Vector{Float64}, s::EEMDSetting)\n\nReturn the IMFs computed by EEMD given the settings.\n\n\n\n\n\n","category":"method"},{"location":"reference/#","page":"Reference","title":"Reference","text":"EEMDSetting","category":"page"},{"location":"reference/#EmpiricalModeDecomposition.EEMDSetting","page":"Reference","title":"EmpiricalModeDecomposition.EEMDSetting","text":"Store the settings required for performing EEMD.\n\n\n\n\n\n","category":"type"},{"location":"#EmpiricalModeDecomposition.jl-Documentation-1","page":"EmpiricalModeDecomposition.jl Documentation","title":"EmpiricalModeDecomposition.jl Documentation","text":"","category":"section"},{"location":"#","page":"EmpiricalModeDecomposition.jl Documentation","title":"EmpiricalModeDecomposition.jl Documentation","text":"A package for Empirical Mode Decomposition and related methods in signal processing.","category":"page"},{"location":"internals/#Internal-functions-1","page":"Internals","title":"Internal functions","text":"","category":"section"},{"location":"internals/#","page":"Internals","title":"Internals","text":"EmpiricalModeDecomposition.sift!(input::Vector{Float64}, s::EMDSetting)","category":"page"},{"location":"internals/#EmpiricalModeDecomposition.sift!-Tuple{Array{Float64,1},EMDSetting}","page":"Internals","title":"EmpiricalModeDecomposition.sift!","text":"sift!(input::Vector{Float64}, s::EMDSetting)\n\nReturn the IMF that satisfies the given settings. In particular, it returns an IMF that satisifes the S number criterion that is found within the set number of siftings.\n\n\n\n\n\n","category":"method"},{"location":"internals/#","page":"Internals","title":"Internals","text":"EmpiricalModeDecomposition.find_extrema!(x::Vector{Float64}, max_x::Vector{Float64}, max_y::Vector{Float64}, min_x::Vector{Float64}, min_y::Vector{Float64})","category":"page"},{"location":"internals/#EmpiricalModeDecomposition.find_extrema!-NTuple{5,Array{Float64,1}}","page":"Internals","title":"EmpiricalModeDecomposition.find_extrema!","text":"find_extrema!(x::Vector{Float64}, max_x::Vector{Float64}, max_y::Vector{Float64},\n              min_x::Vector{Float64}, min_y::Vector{Float64})\n\nReturn the number of maxima, minima, and zero crossings of x after modifying maxx, maxy, minx, miny to contain the maxima and minima of x.\n\n\n\n\n\n","category":"method"},{"location":"internals/#","page":"Internals","title":"Internals","text":"EmpiricalModeDecomposition.linear_extrapolate(x_0::Float64, y_0::Float64, x_1::Float64, y_1::Float64, x::Int64)","category":"page"},{"location":"internals/#EmpiricalModeDecomposition.linear_extrapolate-Tuple{Float64,Float64,Float64,Float64,Int64}","page":"Internals","title":"EmpiricalModeDecomposition.linear_extrapolate","text":"linear_extrapolate(x_0::Float64, y_0::Float64, x_1::Float64, y_1::Float64, x::Int64)\n\nReturn the linear extrapolation of x based on x0, x1, y0, y1.\n\n\n\n\n\n","category":"method"},{"location":"internals/#","page":"Internals","title":"Internals","text":"EmpiricalModeDecomposition.evaluate_spline(x::Vector{Float64}, y::Vector{Float64}, n::Int64)","category":"page"},{"location":"internals/#EmpiricalModeDecomposition.evaluate_spline-Tuple{Array{Float64,1},Array{Float64,1},Int64}","page":"Internals","title":"EmpiricalModeDecomposition.evaluate_spline","text":"evaluate_spline(x::Vector{Float64}, y::Vector{Float64}, n::Int64)\n\nReturn spline generated by the first n elements of (x,y).\n\n\n\n\n\n","category":"method"}]
}
